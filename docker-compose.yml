services:
  flask-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: flask-server
    environment:
      - PYTHONUNBUFFERED=1 # 1 to show py prints in this container 0 to squelch
      - EMAIL_PASSWORD=kkbu szwm engx xugf # app-specific password (can't be used to login to gmail, but allows sending smtp email)
      - DB_URL=postgresql://postgres:passw0rd@pgdb:5432/postgres
      - API_URL=raspberrypi.local/api
      - REINIT_DB=0 # control whether pgdb should be re initialized from data.txt (1) or persisted from the volume (0)
      - LOOP=1 # 0 to disable update loop
      - REBUILD_ALERTS=0 # WARNING: this will fully wipe and rebuild alerts table
    ports:
      - "5000:5000"  # Expose port 5000 to the host
    depends_on:
      - pgdb
    volumes:
      - ./flask-server/data.txt:/app/flask-server/data.txt
      - ./sensor-pos.json:/app/flask-server/sensor-pos.json
      - ./config.txt:/app/flask-server/config.txt

  pgdb:
    image: postgres:17
    container_name: db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=passw0rd
      - POSTGRES_DB=postgres
    volumes:
      - data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx 
    ports:
      - "80:80"  # Exposes port 80 for web traffic
      - "443:443" # Expose ssl port for https
    depends_on:
      - flask-server  # Ensures Flask is up before Nginx
    volumes:
      - ./cert.pem:/etc/nginx/cert.pem:ro #https certificate / private key
      - ./key.pem:/etc/nginx/key.pem:ro #public key
      - ./client/build:/etc/nginx/html:ro #static webpage

volumes:
  data:
    driver: local